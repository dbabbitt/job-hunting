
#!/usr/bin/env python
# coding: utf-8



# Soli Deo gloria



# cd C:\Users\daveb\OneDrive\Documents\GitHub\job-hunting\tests
# python -m unittest test_crf.TestCrfMethods
# python -m unittest -k "test_word2features" test_crf.TestCrfMethods

import unittest

class TestCrfMethods(unittest.TestCase):
    def setUp(self):
        import sys
        import os
        if ('../py' not in sys.path): sys.path.insert(1, '../py')

        # Get the Storage object
        from storage import Storage
        self.s = Storage(
            data_folder_path=os.path.abspath('../data'),
            saves_folder_path=os.path.abspath('../saves')
        )

        # Get the HeaderAnalysis object
        from ha_utils import HeaderAnalysis
        self.ha = HeaderAnalysis(s=self.s, verbose=False)

        # Get the WebScrapingUtilities object
        from scrape_utils import WebScrapingUtilities
        wsu = WebScrapingUtilities(
            s=self.s,
            secrets_json_path=os.path.abspath('../data/secrets/jh_secrets.json')
        )
        uri = wsu.secrets_json['neo4j']['connect_url']
        user =  wsu.secrets_json['neo4j']['username']
        password = wsu.secrets_json['neo4j']['password']

        # Get the CypherUtilities object and Neo4j driver
        from cypher_utils import CypherUtilities
        self.cu = CypherUtilities(
            uri=uri, user=user, password=password, driver=None, s=self.s, ha=self.ha
        )
        
        from neo4j.exceptions import ServiceUnavailable
        try:
            version_str = self.cu.driver.get_server_info().agent
        except ServiceUnavailable as e:
            print(f'You need to start Neo4j as a console')
            raise
        except Exception as e:
            print(f'{e.__class__}: {str(e).strip()}')

        # Get the HeaderCategories object
        from hc_utils import HeaderCategories
        self.hc = HeaderCategories(cu=self.cu, verbose=False)

        # Get the LrUtilities object
        from lr_utils import LrUtilities
        lru = LrUtilities(ha=self.ha, cu=self.cu, hc=self.hc, verbose=False)

        # Get the SectionLRClassifierUtilities object
        from section_classifier_utils import SectionLRClassifierUtilities
        slrcu = SectionLRClassifierUtilities(ha=self.ha, cu=self.cu, verbose=False)

        # Get the SectionSGDClassifierUtilities object
        from section_classifier_utils import SectionSGDClassifierUtilities
        ssgdcu = SectionSGDClassifierUtilities(ha=self.ha, cu=self.cu, verbose=False)

        # Get the SectionCRFClassifierUtilities object
        from section_classifier_utils import SectionCRFClassifierUtilities
        scrfcu = SectionCRFClassifierUtilities(cu=self.cu, ha=self.ha, verbose=False)

        # Get the CrfUtilities object
        from crf_utils import CrfUtilities
        self.crf = CrfUtilities(
            ha=self.ha, hc=self.hc, cu=self.cu, lru=lru, slrcu=slrcu, scrfcu=scrfcu,
            ssgdcu=ssgdcu, verbose=False
        )
        
        # Check if the slrcu has built its parts-of-speech logistic regression elements
        if not hasattr(slrcu, 'pos_predict_percent_fit_dict'):
            slrcu.build_pos_logistic_regression_elements(
                sampling_strategy_limit=None, verbose=False
            )
        
        # Check if the scrfcu has built its parts-of-speech conditional random field elements
        if not hasattr(scrfcu, 'pos_symbol_crf'):
            scrfcu.build_pos_conditional_random_field_elements(verbose=False)
        
        # Check if the ssgdcu has built its parts-of-speech
        # stochastic gradient decent elements
        if not hasattr(ssgdcu, 'pos_predict_percent_fit_dict'):
            ssgdcu.build_pos_stochastic_gradient_descent_elements(
                sampling_strategy_limit=None, verbose=False
            )
        
        # Check if the crf has built its parts-of-speech classifier
        if not hasattr(self.crf, 'CRF'):
            self.crf.build_pos_conditional_random_field_elements(verbose=False)
        
        # Check if the lru has built its is-qualified classifier
        if not (hasattr(lru, 'ISQUALIFIED_LR') and hasattr(lru, 'ISQUALIFIED_CV')):
            lru.build_isqualified_logistic_regression_elements(
                sampling_strategy_limit=None, verbose=False
            )

        # Get the IsHeaderSgdClassifier object and build the isheader classifier
        # from is_header_sgd_classifier import IsHeaderSgdClassifier
        # ihu = IsHeaderSgdClassifier(ha=self.ha, cu=self.cu, verbose=False)
        # ihu.build_pos_stochastic_gradient_descent_elements(verbose=False)
        
        import warnings
        warnings.filterwarnings('ignore')
        
        self.feature_tuple_list = [
            ('div', 
            "<div>At PRA, we don't make our 17000+ people great. It's the other way around. As we have grown to a top-5 CRO, we have maintained the feel of a small company, dedicated to collaboration and passion for what we do.</div>", 'O'),
            ('div', "<div>We always have a desire to keep seeking new and better ways to operate. We don't settle for the same old ways. Our passion for improving patient lives worldwide permeates all that we do. Put simply, we care.</div>", 'O'), ('b', '<b>Responsibilities</b>', 'H-TS'),
            ('div',
            '<div>Due to growth we are currently seeking a Central Data Scientist, to work as part of an established global group that supports project teams in analyzing clinical data to identify risks and data issues, using advanced analytical techniques.</div>', 'O'),
            ('div',
            '<div>Acting as a Key Functional Lead on projects; the Central Data Scientist will assess trial compliance, perform trending analysis, exploratory data reviews and report findings to internal and external stakeholders.</div>', 'O'),
            ('div', '<div>Key responsibilities in this role include:</div>', 'H-TS'),
            ('li', '<li>Developing and maintaining study documents specifying strategy, approach and procedures on assigned protocols/projects.</li>', 'O'),
            ('li', '<li>Providing input to applications, databases and systems used to assess study data quality.</li>', 'O'),
            ('li',
            '<li>Reviewing clinical data at aggregate level regularly throughout assigned studies using analytical reporting tools to support the identification of risks and data patterns/trends.</li>', 'O'),
            ('li',
            '<li>Creating analytical reports and presentations to facilitate review and data-driven decision making during team meetings</li>', 'O'),
            ('li',
            '<li>Performs analytical reviews and collaborates with assigned project teams to address data-related questions and recommend potential solutions.</li>', 'O'), ('li', '<li>Provides input during adaptive monitoring assessment process.</li>', 'O'),
            ('li', '<li>Documents review findings utilizing applicable systems, according to standard procedures.</li>', 'O'),
            ('li',
            '<li>Develops analytical reports using programming knowledge and data modeling techniques, e.g., SQL, SAS.</li>', 'O'),
            ('li', '<li>Leads Analysis of Findings meetings on assigned projects.</li>', 'O'),
            ('li', '<li>Escalates project concerns such as outof-scope tasks, at-risk project deliverables and project team relationship issues to functional and project managers in a timely fashion.</li>', 'O'),
            ('b', '<b>Qualifications</b>', 'H-RQ'),
            ('p', '<p>You are...</p>', 'H-PQ'), ('p', '<p>Analytically-minded, a problem-solver</p>', 'O'),
            ('p', '<p>Here at PRA we want our employees to succeed and ensure that they are set up for this success through constant training, development and support. To enable success in this position you will have:</p>', 'O'),
            ('li', "<li>Bachelor's degree (or equivalent) in a Scientific or Healthcare discipline</li>", 'O'),
            ('li', '<li>Previous experience, ideally in a similar role, but we are also open to considering people with other relevant clinical trials experience, including those working as Lead Data Managers, Programmers, Clinical Research Associates, Clinical Team Managers and Project Managers.</li>', 'O'),
            ('plaintext', 'Familiarity with', 'O'),
            ('b', '<b>risk-based monitoring</b>', 'O'),
            ('li',
            '<li>Technical ability: use of JReview specifically or other analytical/visualization tool (e.g Spotfire, SAS JMP Clinical, SAS, R) or at a very minimum significant experience in using excel (including pivot tables, graphics and data exploration).</li>', 'O'),
            ('li', '<li>Analytical thinker: ability to break down issues into manageable components</li>', 'O'),
            ('b', '<b>SQL experience</b>', 'O'),
            ('plaintext', 'Skills in aggregating data review and interpretation using visualization/analysis software e.g.', 'O'),
            ('plaintext', 'JReview, Tableau, SAS', 'O'),
            ('div', '<div>You will be frequently collaborating within multi-cultural global teams, so will need to demonstrate excellent written and oral communication skills, exhibit pro-active teamwork alongside a positive attitude, and maintain up-to-date industry awareness and understanding of regulation/standards.</div>', 'O'),
            ('b', '<b>PRA is an EEO/AA employer and is committed to providing opportunities to minorities, women, veterans and individuals with disabilities.</b>', 'O'), ('b', '<b>Options</b>', 'H-SP'),
            ('div', '<div>Apply for this job onlineApply</div>', 'O'), ('div', '<div>Share</div>', 'H-O'),
            ('div',
            '<div>Sorry the Share function is not working properly at this moment. Please refresh the page and try again later.</div>', 'O'), ('div', '<div>Share on your newsfeed</div>', 'O'), ('b', '<b>Connect With Us!</b>', 'O')
        ]
    
    def test_word2features(self):
        feature_dict = {'bias': 1.0, 'child_str.pos_lr_predict_single': 'O-CS', 'position': 1, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': True, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, 'BOS': True, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': True, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'H-TS', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': True, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': True, '+2:tag.presentation_set': True, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': True, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        self.assertEqual(self.crf.word2features(self.feature_tuple_list, 0), feature_dict)
    def test_word2features0(self):
        feature_dict = {'postag': 'H-RQ', 'child_str.pos_lr_predict_single': 'H-RQ', 'child_str.pos_crf_predict_single': 'H-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', 'BOS': True, '+1:postag': 'O-RQ', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 5, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('hrq', '<hrq>Role Primary Skill:</hrq>', 'H-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features1(self):
        feature_dict = {'postag': 'O-RQ', 'child_str.pos_lr_predict_single': 'O-RQ', 'child_str.pos_crf_predict_single': 'O-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'H-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-RQ', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('orq', '<orq>1 - IT Infrastructure Operations (P5 - Master)</orq>', 'O-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features2(self):
        feature_dict = {'postag': 'O-RQ', 'child_str.pos_lr_predict_single': 'O-RQ', 'child_str.pos_crf_predict_single': 'O-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-RQ', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('orq', '<orq>2 - Infrastructure Architecture &amp; Design (P5 - Master)</orq>', 'O-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features3(self):
        feature_dict = {'postag': 'O-RQ', 'child_str.pos_lr_predict_single': 'O-RQ', 'child_str.pos_crf_predict_single': 'O-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-RQ', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('orq', '<orq>3 - Accenture Delivery Methods (ADM) (P4 - Expert)</orq>', 'O-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features4(self):
        feature_dict = {'postag': 'O-RQ', 'child_str.pos_lr_predict_single': 'O-RQ', 'child_str.pos_crf_predict_single': 'O-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-RQ', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('orq', '<orq>4 - Intelligent Infrastructure (P4 - Expert)</orq>', 'O-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features5(self):
        feature_dict = {'postag': 'O-RQ', 'child_str.pos_lr_predict_single': 'O-RQ', 'child_str.pos_crf_predict_single': 'O-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'H-TS', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('orq', '<orq>5 - Build Management (P4 - Expert)</orq>', 'O-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features6(self):
        feature_dict = {'postag': 'H-TS', 'child_str.pos_lr_predict_single': 'H-TS', 'child_str.pos_crf_predict_single': 'H-TS', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-TS', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('hts', '<hts>Role Description:</hts>', 'H-TS')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features7(self):
        feature_dict = {'postag': 'O-TS', 'child_str.pos_lr_predict_single': 'O-TS', 'child_str.pos_crf_predict_single': 'O-TS', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'H-TS', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-RQ', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('ots', '<ots>Leads the implementation of Infrastructure Services projects, leveraging our global delivery capability (method, tools, training, assets).</ots>', 'O-TS')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features8(self):
        feature_dict = {'postag': 'O-RQ', 'child_str.pos_lr_predict_single': 'O-RQ', 'child_str.pos_crf_predict_single': 'O-RQ', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-TS', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-JT', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('orq', '<orq>Ability to leads the implementation of Infrastructure Services projects, leveraging our global delivery capability (method, tools, training, assets).</orq>', 'O-RQ')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features9(self):
        feature_dict = {'postag': 'O-JT', 'child_str.pos_lr_predict_single': 'O-JT', 'child_str.pos_crf_predict_single': 'O-JT', 'child_str.pos_sgd_predict_single': 'O-JT', '-1:postag': 'O-RQ', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-CS', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('ojt', '<ojt>Role ID: 4688612</ojt>', 'O-JT')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features10(self):
        feature_dict = {'postag': 'O-CS', 'child_str.pos_lr_predict_single': 'O-CS', 'child_str.pos_crf_predict_single': 'O-CS', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-JT', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-JT', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('ocs', '<ocs>Client: TIAA</ocs>', 'O-CS')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features11(self):
        feature_dict = {'postag': 'O-JT', 'child_str.pos_lr_predict_single': 'O-JT', 'child_str.pos_crf_predict_single': 'O-JT', 'child_str.pos_sgd_predict_single': 'O-JT', '-1:postag': 'O-CS', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-TS', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('ojt', '<ojt>Role Title: Layer 1 SOW - Senior Infrastructure Analyst</ojt>', 'O-JT')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features12(self):
        feature_dict = {'postag': 'O-TS', 'child_str.pos_lr_predict_single': 'O-TS', 'child_str.pos_crf_predict_single': 'O-TS', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-JT', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-OL', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('ots', '<ots>Assigned Role: Infra Implementation Svcs Lead</ots>', 'O-TS')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features13(self):
        feature_dict = {'postag': 'O-OL', 'child_str.pos_lr_predict_single': 'O-OL', 'child_str.pos_crf_predict_single': 'O-OL', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-TS', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-SP', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('ool', '<ool>Project Metro City: New York</ool>', 'O-OL')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features14(self):
        feature_dict = {'postag': 'O-SP', 'child_str.pos_lr_predict_single': 'O-SP', 'child_str.pos_crf_predict_single': 'O-SP', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-OL', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-JD', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 2, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        feature_tuple = ('osp', '<osp>Career Level From - To: 10 to 8</osp>', 'O-SP')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features15(self):
        feature_dict = {'postag': 'O-JD', 'child_str.pos_lr_predict_single': 'O-JD', 'child_str.pos_crf_predict_single': 'O-JD', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-SP', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-JD', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('ojd', '<ojd>Role Start Date: 2/13/2023</ojd>', 'O-JD')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features16(self):
        feature_dict = {'postag': 'O-JD', 'child_str.pos_lr_predict_single': 'O-JD', 'child_str.pos_crf_predict_single': 'O-JD', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-JD', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-IP', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 4, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('ojd', '<ojd>Role End Date: 1/31/2024</ojd>', 'O-JD')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features17(self):
        feature_dict = {'postag': 'O-IP', 'child_str.pos_lr_predict_single': 'O-IP', 'child_str.pos_crf_predict_single': 'O-IP', 'child_str.pos_sgd_predict_single': 'O-IP', '-1:postag': 'O-JD', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-IP', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}
        feature_tuple = ('oip', '<oip>Role Client Supply Contact: Bernardele,Mariana A.</oip>', 'O-IP')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features18(self):
        feature_dict = {'postag': 'O-IP', 'child_str.pos_lr_predict_single': 'O-IP', 'child_str.pos_crf_predict_single': 'O-IP', 'child_str.pos_sgd_predict_single': 'O-IP', '-1:postag': 'O-IP', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-IP', '+2:tag.basic_text_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0}
        feature_tuple = ('oip', '<oip>Role Primary Contact: Rukes,Amiee</oip>', 'O-IP')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features19(self):
        feature_dict = {'postag': 'O-IP', 'child_str.pos_lr_predict_single': 'O-IP', 'child_str.pos_crf_predict_single': 'O-IP', 'child_str.pos_sgd_predict_single': 'O-IP', '-1:postag': 'O-IP', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O-IP'}
        feature_tuple = ('oip', '<oip>Role Primary Contact (Email ID): amiee.rukes@accenture.com</oip>', 'O-IP')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_word2features20(self):
        feature_dict = {'postag': 'O-IP', 'child_str.pos_lr_predict_single': 'O-IP', 'child_str.pos_crf_predict_single': 'O-IP', 'child_str.pos_sgd_predict_single': 'O-RQ', '-1:postag': 'O-IP', '-1:tag.basic_text_set': False, '-1:tag.inline_elements_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.section_headings_set': False, 'EOS': True}
        feature_tuple = ('oip', '<oip>Role Is Sold: Yes</oip>', 'O-IP')
        self.assertEqual(
            {k: v for k, v in sorted(self.crf.word2features([feature_tuple], 0).items())},
            {k: v for k, v in sorted(feature_dict.items())}
        )
    def test_sent2features(self):
        test_feature_dict = {'bias': 1.0, 'child_str.pos_lr_predict_single': 'O-CS', 'position': 1, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': True, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, 'BOS': True, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': True, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'H-TS', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': True, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': True, '+2:tag.presentation_set': True, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': True, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}
        result_feature_dict = self.crf.sent2features(self.feature_tuple_list)[0]
        self.assertEqual(result_feature_dict, test_feature_dict)

    def test_sent2labels(self):
        labels_list = ['O', 'O', 'H-TS', 'O', 'O', 'H-TS', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'H-RQ', 'H-PQ', 'O',
                       'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'H-SP', 'O', 'H-O', 'O', 'O', 'O']
        self.assertEqual(self.crf.sent2labels(self.feature_tuple_list), labels_list)
    def test_sent2tokens(self):
        tokens_list = ['div', 'div', 'b', 'div', 'div', 'div', 'li', 'li', 'li', 'li', 'li',
                       'li', 'li', 'li', 'li', 'li', 'b', 'p', 'p', 'p', 'li', 'li', 'plaintext',
                       'b', 'li', 'li', 'b', 'plaintext', 'plaintext', 'div', 'b', 'b', 'div', 'div', 'div', 'div', 'b']
        self.assertEqual(self.crf.sent2tokens(self.feature_tuple_list), tokens_list)

    def test_crf_predict_marginals_single(self):
        sent2features_list = [ {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.8953597, 'position': 1, 'postag': 'H-TS', 'tag.basic_text_set': False, 'tag.block_elements_set': False, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': True, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': True, 'tag.presentation_set': True, 'tag.section_headings_set': False, 'BOS': True, '+1:postag': 'O', '+1:tag.basic_text_set': True, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'H-TS', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': True, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': True, '+2:tag.presentation_set': True, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.9917007, 'position': 2, 'postag': 'O', 'tag.basic_text_set': True, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'H-TS', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': False, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': True, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': True, '-1:tag.presentation_set': True, '-1:tag.section_headings_set': False, '+1:postag': 'H-TS', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': False, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': True, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': True, '+1:tag.presentation_set': True, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.89657384, 'position': 3, 'postag': 'H-TS', 'tag.basic_text_set': False, 'tag.block_elements_set': False, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': True, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': True, 'tag.presentation_set': True, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': False, '-1:tag.basic_text_set': True, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 8, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.09651873167094656, 'child_str.lda': 0.12308072, 'position': 4, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'H-TS', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': False, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': True, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': True, '-1:tag.presentation_set': True, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.015589515, 'position': 5, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.025936412, 'position': 6, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.07802156, 'position': 7, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.016373686, 'position': 8, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.12867057, 'position': 9, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'H-RQ', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': True, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': True, '+3:tag.presentation_set': True, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.1096327983423807, 'child_str.lda': 0.026736436, 'position': 10, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'H-RQ', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': True, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': True, '+2:tag.presentation_set': True, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.016758936, 'position': 11, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'H-RQ', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': False, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': True, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': True, '+1:tag.presentation_set': True, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.87286425, 'position': 12, 'postag': 'H-RQ', 'tag.basic_text_set': False, 'tag.block_elements_set': False, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': True, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': True, 'tag.presentation_set': True, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 18, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.07703073049702817, 'child_str.lda': 0.052478947, 'position': 13, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'H-RQ', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': False, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': True, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': True, '-1:tag.presentation_set': True, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.07133273912934962, 'child_str.lda': 0.06777852, 'position': 14, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.07667650500058482, 'child_str.lda': 0.058820438, 'position': 15, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08252939237694315, 'child_str.lda': 0.035537776, 'position': 16, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.03138569, 'position': 17, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.0686993, 'position': 18, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.07858228666884923, 'child_str.lda': 0.07044157, 'position': 19, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.057467915, 'position': 20, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.33311862, 'position': 21, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.07922144633028416, 'child_str.lda': 0.062027827, 'position': 22, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.14072094507228144, 'child_str.lda': 0.03427231, 'position': 23, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.07740829143161271, 'child_str.lda': 0.048962846, 'position': 24, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': True, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.06821081, 'position': 25, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': True, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': True, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.04202743, 'position': 26, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': True, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': True, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': True, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08225360733052738, 'child_str.lda': 0.039549, 'position': 27, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': True, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': True, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': True, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': True, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': True}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.97974354, 'position': 28, 'postag': 'O', 'tag.basic_text_set': True, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': True, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': True, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'O', '+2:tag.basic_text_set': True, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': True, 'tag.consecutive_next_tags': 0, '+3:postag': 'H-LN', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': True, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': True, '+3:tag.presentation_set': True, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.9726256, 'position': 29, 'postag': 'O', 'tag.basic_text_set': True, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': True, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': True, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': True, '+2:postag': 'H-LN', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': True, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': True, '+2:tag.presentation_set': True, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 0, '+3:postag': 'O', '+3:tag.basic_text_set': True, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.89548254, 'position': 30, 'postag': 'O', 'tag.basic_text_set': True, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': True, '-1:tag.basic_text_set': True, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'H-LN', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': False, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': True, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': True, '+1:tag.presentation_set': True, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': True, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:postag': 'H-LN', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': True, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': True, '+3:tag.presentation_set': True, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.8809295, 'position': 31, 'postag': 'H-LN', 'tag.basic_text_set': False, 'tag.block_elements_set': False, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': True, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': True, 'tag.presentation_set': True, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': False, '-1:tag.basic_text_set': True, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': True, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'H-LN', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': True, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': True, '+2:tag.presentation_set': True, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:postag': 'O', '+3:tag.basic_text_set': True, '+3:tag.block_elements_set': True, '+3:tag.document_body_elements_set': True, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': False, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.9630839, 'position': 32, 'postag': 'O', 'tag.basic_text_set': True, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'H-LN', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': False, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': True, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': True, '-1:tag.presentation_set': True, '-1:tag.section_headings_set': False, '+1:postag': 'H-LN', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': False, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': True, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': True, '+1:tag.presentation_set': True, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': True, '+2:tag.block_elements_set': True, '+2:tag.document_body_elements_set': True, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': False, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 1, '+3:postag': 'O', '+3:tag.basic_text_set': False, '+3:tag.block_elements_set': False, '+3:tag.document_body_elements_set': False, '+3:tag.inline_elements_set': False, '+3:tag.lists_set': False, '+3:tag.null_element': True, '+3:tag.other_block_elements_set': False, '+3:tag.phrase_elements_set': False, '+3:tag.presentation_set': False, '+3:tag.section_headings_set': False, '+3:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.28787115044555384, 'child_str.lda': 0.9236659, 'position': 33, 'postag': 'H-LN', 'tag.basic_text_set': False, 'tag.block_elements_set': False, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': True, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': True, 'tag.presentation_set': True, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': False, '-1:tag.basic_text_set': True, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': True, '+1:tag.block_elements_set': True, '+1:tag.document_body_elements_set': True, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': False, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False, '+2:postag': 'O', '+2:tag.basic_text_set': False, '+2:tag.block_elements_set': False, '+2:tag.document_body_elements_set': False, '+2:tag.inline_elements_set': False, '+2:tag.lists_set': False, '+2:tag.null_element': True, '+2:tag.other_block_elements_set': False, '+2:tag.phrase_elements_set': False, '+2:tag.presentation_set': False, '+2:tag.section_headings_set': False, '+2:tag==previous': False, 'tag.consecutive_next_tags': 2}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.992626, 'position': 34, 'postag': 'O', 'tag.basic_text_set': True, 'tag.block_elements_set': True, 'tag.document_body_elements_set': True, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': False, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'H-LN', '-1:previous==tag': False, '-1:tag.basic_text_set': False, '-1:tag.block_elements_set': False, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': True, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': True, '-1:tag.presentation_set': True, '-1:tag.section_headings_set': False, '+1:postag': 'O', '+1:tag.basic_text_set': False, '+1:tag.block_elements_set': False, '+1:tag.document_body_elements_set': False, '+1:tag.inline_elements_set': False, '+1:tag.lists_set': False, '+1:tag.null_element': True, '+1:tag.other_block_elements_set': False, '+1:tag.phrase_elements_set': False, '+1:tag.presentation_set': False, '+1:tag.section_headings_set': False, '+1:tag==previous': False}, {'bias': 1.0, 'child_str.is_header_lr': 0.08548539502940813, 'child_str.lda': 0.27207062, 'position': 35, 'postag': 'O', 'tag.basic_text_set': False, 'tag.block_elements_set': False, 'tag.document_body_elements_set': False, 'tag.inline_elements_set': False, 'tag.lists_set': False, 'tag.null_element': True, 'tag.other_block_elements_set': False, 'tag.phrase_elements_set': False, 'tag.presentation_set': False, 'tag.section_headings_set': False, '-1:postag': 'O', '-1:previous==tag': False, '-1:tag.basic_text_set': True, '-1:tag.block_elements_set': True, '-1:tag.document_body_elements_set': True, '-1:tag.inline_elements_set': False, '-1:tag.lists_set': False, '-1:tag.null_element': False, '-1:tag.other_block_elements_set': False, '-1:tag.phrase_elements_set': False, '-1:tag.presentation_set': False, '-1:tag.section_headings_set': False, 'EOS': True}]
        predicted_dict = {'H-TS': 5.3646693839884806e-05, 'O': 0.9985764313930131, 'H-PQ': 0.00012906354623567836, 'H-RQ': 7.399930529558137e-05, 'H-CS': 5.9469618258831476e-05, 'O-SP': 7.822212894830886e-05, 'O-TS': 0.00010836305029459903, 'O-LN': 1.5267473702124545e-05, 'H-LN': 3.2475791876167405e-05, 'H-JT': 1.1204129149629786e-05, 'H-OL': 3.2679873270051815e-05, 'H-JD': 1.1769607476325773e-05, 'H-SP': 5.247081834794072e-05, 'O-OL': 7.096607091863736e-05, 'H-ER': 3.093898996953977e-05, 'H-IP': 3.134920376061408e-05, 'O-JD': 4.18342197369535e-05, 'O-RQ': 4.660987996296872e-05, 'O-CS': 0.00010374947523043076, 'O-PQ': 2.3002831034374827e-05, 'H-PD': 3.829118724640944e-06, 'O-ER': 9.147095055965149e-05, 'H-O': 4.446975455638619e-05, 'H': 9.440677973877824e-05, 'O-O': 0.00017074231351995738, 'O-IP': 1.1566982582753111e-05}
        actual_dict = self.crf.CRF.predict_marginals_single(sent2features_list)[1]
        
        self.assertAlmostEqual(actual_dict['H-TS'], predicted_dict['H-TS'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O'], predicted_dict['O'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-PQ'], predicted_dict['H-PQ'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-RQ'], predicted_dict['H-RQ'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-CS'], predicted_dict['H-CS'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-SP'], predicted_dict['O-SP'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-TS'], predicted_dict['O-TS'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-LN'], predicted_dict['O-LN'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-LN'], predicted_dict['H-LN'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-JT'], predicted_dict['H-JT'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-OL'], predicted_dict['H-OL'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-JD'], predicted_dict['H-JD'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-SP'], predicted_dict['H-SP'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-OL'], predicted_dict['O-OL'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-ER'], predicted_dict['H-ER'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-IP'], predicted_dict['H-IP'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-JD'], predicted_dict['O-JD'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-RQ'], predicted_dict['O-RQ'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-CS'], predicted_dict['O-CS'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-PQ'], predicted_dict['O-PQ'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-PD'], predicted_dict['H-PD'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-ER'], predicted_dict['O-ER'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H-O'], predicted_dict['H-O'], delta=0.1)
        self.assertAlmostEqual(actual_dict['H'], predicted_dict['H'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-O'], predicted_dict['O-O'], delta=0.1)
        self.assertAlmostEqual(actual_dict['O-IP'], predicted_dict['O-IP'], delta=0.1)
    
    def test_predict_single(self):
        feature_tuple_list = [('plaintext', 'The Data Science Transformation team seeks a hands-on Manager/Principal Machine Learning Data Scientist to join our team. You should be an exceptional disciplined and self-motivated Data Scientist with predictive modeling and machine learning advanced analytics experience and a passion for working with healthcare data (relevant experience with data from other industries of interest as well; financial, retail, telco, etc), experience using various computational approaches, and a portfolio of projects you can show and talk about.', 'O-RQ'), ('b', '<b>Primary Responsibilities:</b>', 'H-TS'), ('li', "<li>A leader. You're a hands-on Machine Learning leader who challenge conventional thinking and work with stakeholders to identify and improve the status quo. You i ndependently identify significant opportunities in an ambiguous area and builds consensus around roadmaps and how to evaluate success.</li>", 'O-TS'), ('li', '<li>People Manager. You have experience leading and growing a team of M/L data scientists. You have a passion for mentoring members of your team to achieve strong results and continued engagement.</li>', 'O-TS'), ('li', '<li>Innovative. You continually research and evaluate emerging technologies. You stay current on published state-of-the-art methods, technologies, and applications and seek out opportunities to apply them.</li>', 'O-TS'), ('li', '<li>Technical Leadership. You are proficient at performing hands-on coding including reviews through all phases of development, from design through training, evaluation, validation, backtested and implementation . You know how to interpret a confusion matrix or a ROC curve. You have experience with clustering, classification, sentiment analysis, time series, and deep learning.</li>', 'O-RQ'), ('li', '<li>A "Big data" guru. You have the skills to retrieve, combine, and analyze data from a variety of sources and structures. You know understanding the data is often the key to great data science.</li>', 'O-TS'), ('li', '<li>Partner with a cross-functional team of data scientists, software engineers, IT, data architect and product managers to deliver machine learning products customers love.</li>', 'O-TS'), ('li', '<li>Pilot and build out data science custom projects into repeatable and scalable data science products</li>', 'O-TS'), ('li', '<li>Develop a rigorous ML Ops data science culture, including best practices on pipeline creation, model building in productization, enabling consistent and high-quality delivery</li>', 'O-TS'), ('li', '<li>Work with a great deal of autonomy to find solutions to complex problems</li>', 'O-TS'), ('plaintext', 'You effectively communicate complex technical concepts/results to business partners and non-technical audiences', 'O-RQ'), ('div', "<div>You'll be rewarded and recognized for your performance in an environment that will challenge you and give you clear direction on what it takes to succeed in your role as well as provide development for other roles you may be interested in.</div>", 'O-TS'), ('b', '<b>Required Qualifications:</b>', 'H-RQ'), ('li', '<li>MS or PhD in Applied Mathematics, Physics, Computer Science, Statistics or related technical field.</li>', 'O-ER'), ('li', '<li>5+ years of hands-on experience developing analytics with machine learning, deep learning, NLP, and/or other related modeling techniques</li>', 'O-RQ'), ('li', '<li>Experience designing a data science roadmap and executing the vision behind it.</li>', 'O-RQ'), ('li', '<li>Demonstrated history of leadership in managing high impact data science and engineering projects</li>', 'O-TS'), ('b', '<b>Experience directly managing a team of data scientists (role is 50/50)</b>', 'H-TS'), ('b', '<b>Experience working in an environment where the end product is a software solution</b>', 'O-CS'), ('li', '<li>Strong proficiency in advanced data science tools such as Python, Spark and H2O, Tensorflow etc. and distributed computing systems</li>', 'O-RQ'), ('li', '<li>Demonstrated ability to communicate complex technical concepts to non-technical audiences</li>', 'O-RQ'), ('li', '<li>Familiarity with wrangling large datasets with big data tools such as Hadoop, Hive and Spark.</li>', 'O-TS'), ('li', '<li>Experience applying computational algorithms and statistical methods to structured and unstructured data</li>', 'O-RQ'), ('li', '<li>Expert ability to breakdown and clearly define problems</li>', 'O-RQ'), ('li', '<li>Strong ability to communicate highly technical results to a diverse audience</li>', 'O-RQ'), ('plaintext', 'Available location: Eden Prairie, MN; Boston, MA or Basking Ridge NJ. Telecommute maybe considered for the right candidate.', 'O-RQ'), ('b', '<b>Preferred Qualifications:</b>', 'H-PQ'), ('li', '<li>Experience with deploying ML models in Azure, AWS, and/or Google Cloud</li>', 'O-RQ'), ('li', '<li>Expertise in healthcare data, e.g. medical and pharmacy claims, EMR/clinical data, lab data, etc.</li>', 'O-TS'), ('plaintext', 'Experience with agile product development', 'O-RQ'), ('b', '<b>Careers with Optum.</b>', 'H-CS'), ('plaintext', "Here's the idea. We built an entire organization around one giant objective; make health care work better for everyone. So when it comes to how we use the world?s large accumulation of health-related information, or guide health and lifestyle choices or manage pharmacy benefits for millions, our first goal is to leap beyond the status quo and uncover new ways to serve. Optum, part of the UnitedHealth Group family of businesses, brings together some of the greatest minds and most advanced ideas on where health care has to go in order to reach its fullest potential. For you, that means working on high performance teams against sophisticated challenges that matter. Optum, incredible ideas in one incredible company and a singular opportunity to do", 'O-CS'), ('plaintext', "your life's best work.(sm)", 'O-SP'), ('plaintext', "*All Telecommuters will be required to adhere to UnitedHealth Group's Telecommuter Policy.", 'O-TS'), ('plaintext', 'Diversity creates a healthier atmosphere: UnitedHealth Group is an Equal Employment Opportunity/Affirmative Action employer and all qualified applicants will receive consideration for employment without regard to race, color, religion, sex, age, national origin, protected veteran status, disability status, sexual orientation, gender identity or expression, marital status, genetic information, or any other characteristic protected by law.', 'O-LN'), ('i', '<i>UnitedHealth Group is a drug-free workplace. Candidates are required to pass a drug test before beginning employment.</i>', 'O-LN')]
        self.assertEqual(self.crf.CRF.predict_single(self.crf.sent2features(feature_tuple_list)), pos_symbol_predictions_list)

if __name__ == '__main__':
    unittest.main()